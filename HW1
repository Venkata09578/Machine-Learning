{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"HW1Koouri-Prathusha","version":"0.3.2","provenance":[{"file_id":"1OhqaMGKbRzqa5tTS1rGFfdlium2Clqcv","timestamp":1548424929438}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python [default]","language":"python","name":"python3"}},"cells":[{"metadata":{"id":"oIdTxRmNwUg_","colab_type":"text"},"cell_type":"markdown","source":["# HW 1: Python Drill"]},{"metadata":{"id":"Ef58uM4CwUh5","colab_type":"text"},"cell_type":"markdown","source":["* Please note that there may be more than one ways to solve each drill.  \n","* Use Python for this HW.  \n","* Include a brief README section if your code requires special steps to run.\n","* You would also need to explain how you arrive at your solution."]},{"metadata":{"id":"IeV4dzDAwUj1","colab_type":"text"},"cell_type":"markdown","source":["### Drill 1: Largest Palindrome\n","A palindromic number reads the same both ways. For example, 1234321 is a palindrome. The largest palindrome made from the product of two two-digit numbers is 9009 = 91 × 99. Find the largest palindrome made from the product of two three-digit numbers. Afterward, write a brief explanation walking through your solution's logic in markdown."]},{"metadata":{"id":"X9JIs0Q9wUkV","colab_type":"code","outputId":"c9f38959-d3f3-432b-feb2-071560c73755","executionInfo":{"status":"ok","timestamp":1548898103784,"user_tz":480,"elapsed":911,"user":{"displayName":"Prathusha Koouri","photoUrl":"","userId":"11784553990265599358"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["largest_palindrome = 0\n","\n","for i in range(99,999):\n","  for j in range(99,999):\n","    c= i*j\n","    if int(str(c)[::-1]) == c:\n","      if i*j > largest_palindrome:\n","        largest_palindrome = i*j\n","\n","print(largest_palindrome)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["906609\n"],"name":"stdout"}]},{"metadata":{"id":"hK9Roa0awUlE","colab_type":"text"},"cell_type":"markdown","source":["#### Explainign how you solve Drill 1: \n","#### The algorithmic steps for solution are:\n","1. Initialize a variable 'largest_palindrome' equals zero. \n","2. Run a for loop from 99 to 999 and another for loop nested inside the first loop where we select second 3 digit number.<br/>\n","3. Calculate the product of 2 numbers and if the product is a palindrome we will check if the product of 2 numbers is greater than the number saved in variable largest_palindrome .<br/>\n","4. If the product of i and j is greater, then the value of largest_palindrome is chaged to the product of obtained or else the loop continues.\n","5. After exiting the loop, print the largest_palindrome."]},{"metadata":{"id":"9V9q2vC2wUlP","colab_type":"text"},"cell_type":"markdown","source":["\n","### Drill 2: Summation of Primes\n","The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17. Find the sum of all the primes below 2,000. Afterward, write a brief explanation walking through your solution's logic in markdown."]},{"metadata":{"id":"sW-q2uIgwUlZ","colab_type":"code","outputId":"ecf7199d-8e49-44a8-f791-b0e82d1e2226","executionInfo":{"status":"ok","timestamp":1548898108702,"user_tz":480,"elapsed":338,"user":{"displayName":"Prathusha Koouri","photoUrl":"","userId":"11784553990265599358"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["sum = 0\n","for num in range(1,2000):\n","  if num > 1:\n","    for i in range(2,num):\n","      if num % i == 0:\n","        break\n","    else:\n","      sum = sum + num\n","\n","print(sum)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["277050\n"],"name":"stdout"}]},{"metadata":{"id":"3n3rAArLwUmN","colab_type":"text"},"cell_type":"markdown","source":["#### Explainign how you solve Drill 2:  \n","#### The algorithmic steps for solution are:\n","1. Initialize sum = 0<br/>\n","2. Run a for loop ranging from 1 to 2000<br/>\n","3. If the number is greater than 1 , we will check for whether the number is prime or not<br/>\n","4. To check if the number is prime or not , run a forloop range from 2 to the number and then take the modules of the  'number' by each iterable element 'i' and check if the remainder is 0.<br/>\n","5. If the remainder is 0 in that case the number is not prime, break the loop.<br/>\n","6. If the number obtained is prime add the number to sum and after exiting for loop print the sum."]},{"metadata":{"id":"acMTTJjXwUmp","colab_type":"text"},"cell_type":"markdown","source":["### Drill 3: Multiples of 3 and 5\n","If we list all of the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6, and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1,000. Afterward, write a brief explanation walking through your solution's logic in markdown."]},{"metadata":{"id":"pDzS7Kc8wUnI","colab_type":"code","outputId":"480000ca-e00c-47e8-a2b6-76df974ea6bb","executionInfo":{"status":"ok","timestamp":1548898112775,"user_tz":480,"elapsed":363,"user":{"displayName":"Prathusha Koouri","photoUrl":"","userId":"11784553990265599358"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"cell_type":"code","source":["sum = 0\n","for i in range(1,1000):\n","  if i%3 == 0 or i%5 == 0:\n","    sum = sum + i\n","    \n","print(sum)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["233168\n"],"name":"stdout"}]},{"metadata":{"id":"RtyLAfblwUn8","colab_type":"text"},"cell_type":"markdown","source":["#### Explainign how you solve Drill 3:\n","#### The algorithmic steps for solution are:\n","1. Initialize sum to 0<br/>\n","2. Run a for loop from 1 to 1000<br/>\n","3. Check if it is divisible by 3 or 5 , if yes then add the number to the sum and repeat for all numbers.<br/>\n","4. Print the sum at the end."]},{"metadata":{"id":"0UGvuKZVwUoL","colab_type":"text"},"cell_type":"markdown","source":["### Drill 4: String Compressor\n","Implement a method to perform basic string compression using the counts of repeated characters. (This is called run-length encoding.) For example, the string \"aabcccccaaa\" would become a2b1c5a3. If the “compressed” string would not become smaller than the original string, your method should return the original string. You can assume the string has only uppercase and lowercase letters (a–z). Specify whether your solution is case sensitive or case insensitive and what you would need to change to make it the other. Afterward, write a brief explanation walking through your solution's logic in markdown."]},{"metadata":{"id":"G1Zo6FBgwUoc","colab_type":"code","outputId":"c60776f4-b08f-49d5-ef05-dbcfca8358d8","executionInfo":{"status":"ok","timestamp":1548898081309,"user_tz":480,"elapsed":359,"user":{"displayName":"Prathusha Koouri","photoUrl":"","userId":"11784553990265599358"}},"colab":{"base_uri":"https://localhost:8080/","height":69}},"cell_type":"code","source":["def string_compressor(word):\n","    compressed_word = \"\"\n","    count_letter = \"\"\n","    count = 0\n","    \n","#     word = word.lower()\n","    \n","    for letter in word:\n","        if letter == count_letter:\n","            count += 1\n","        else:\n","            if count > 0:\n","                compressed_word += count_letter + str(count)\n","            count_letter = letter\n","            count = 1\n","    compressed_word += count_letter + str(count)\n","    \n","    if len(compressed_word) < len(word):\n","        return compressed_word\n","    else:\n","        return word\n","\n","print(string_compressor('aabbbdcc'))\n","\n","print(string_compressor('aabcccccaaa'))\n","\n","print(string_compressor('aabcccccAaa'))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["aabbbdcc\n","a2b1c5a3\n","a2b1c5A1a2\n"],"name":"stdout"}]},{"metadata":{"id":"NmS3syOLwUpQ","colab_type":"text"},"cell_type":"markdown","source":["#### Explaining how you solve Drill 4:\n","#### The algorithmic steps for solution are:\n","1. Define a function string_compressor with input word.<br/>\n","2. Initialize 3 variables to 0(count, count_letter and compressed word).<br/>\n","3. Run a forloop on word selecting letter each time<br/>\n","4. Check for the letter equals count_letter, if yes, increment ount by 1.<br/>\n","5. Else initialize count_letter to letter and set count to 1. And check if count greater than 1 , if yes, then add the count_letter and count(convert count to string as appending a string and int is not possible) to compressed_word.<br/>\n","6. Exit the forloop and add last count_letter and it's count to compressed_word<br/>\n","7. Then check if the length of compressed_word is less than the length of actual word, if yes, return compressed_word or else return actual word.<br/>\n","8. Check for this by calling the function with some string as input and print the output.<br/>\n","9. The above program is case-sensitive , to make it case-insensitive , we just need to add the line \"word =  word.lower()\"."]},{"metadata":{"id":"0GEMzrlswUpj","colab_type":"text"},"cell_type":"markdown","source":["### *BONUS* Drill: MachineLearning\n","Write a program that prints all of the numbers from 1 to 100. For multiples of 3, instead of the number, print \"Machine;\" for multiples of 5, print \"Learning.\" For numbers that are multiples of both 3 and 5, print \"MachineLearning.\" Afterward, write a brief explanation walking through your solution's logic in markdown."]},{"metadata":{"id":"4uzC1FZ_wUqP","colab_type":"code","outputId":"184c8931-09fe-4ea0-a867-be893364a96e","executionInfo":{"status":"ok","timestamp":1548897920665,"user_tz":480,"elapsed":345,"user":{"displayName":"Prathusha Koouri","photoUrl":"","userId":"11784553990265599358"}},"colab":{"base_uri":"https://localhost:8080/","height":1751}},"cell_type":"code","source":["for i in range(1,101):\n","  if i%5 == 0 and i%3 == 0:\n","    print('MachineLearning')\n","  elif i%3 == 0:\n","    print('Machine')\n","  elif i%5 == 0:\n","    print('Learning')\n","  else:\n","    print(i)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["1\n","2\n","Machine\n","4\n","Learning\n","Machine\n","7\n","8\n","Machine\n","Learning\n","11\n","Machine\n","13\n","14\n","MachineLearning\n","16\n","17\n","Machine\n","19\n","Learning\n","Machine\n","22\n","23\n","Machine\n","Learning\n","26\n","Machine\n","28\n","29\n","MachineLearning\n","31\n","32\n","Machine\n","34\n","Learning\n","Machine\n","37\n","38\n","Machine\n","Learning\n","41\n","Machine\n","43\n","44\n","MachineLearning\n","46\n","47\n","Machine\n","49\n","Learning\n","Machine\n","52\n","53\n","Machine\n","Learning\n","56\n","Machine\n","58\n","59\n","MachineLearning\n","61\n","62\n","Machine\n","64\n","Learning\n","Machine\n","67\n","68\n","Machine\n","Learning\n","71\n","Machine\n","73\n","74\n","MachineLearning\n","76\n","77\n","Machine\n","79\n","Learning\n","Machine\n","82\n","83\n","Machine\n","Learning\n","86\n","Machine\n","88\n","89\n","MachineLearning\n","91\n","92\n","Machine\n","94\n","Learning\n","Machine\n","97\n","98\n","Machine\n","Learning\n"],"name":"stdout"}]},{"metadata":{"id":"mxsIw-LKwUq6","colab_type":"text"},"cell_type":"markdown","source":["#### Explaining how you solve Bonus Drill:\n","#### The algorithmic steps for solution are:\n","1. Run a forloop from 1 to 101<br/>\n","2. We need 3 if conditions to print as specified in problem statement.<br/>\n","3. If the number is divisible by both 3 and 5 , prints MachineLeaning.<br/>\n","4. If the number is divisible by 3, prints Machine.<br/>\n","5. If the number is divisible by 5, prints Learning.<br/>\n","6. Else prints the number.\n"]},{"metadata":{"id":"gB_Pn5DXTWks","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}